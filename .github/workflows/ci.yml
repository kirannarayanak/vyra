name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'

jobs:
  # Smart Contracts Testing
  contracts-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install dependencies
        run: |
          cd contracts
          forge install

      - name: Build contracts
        run: |
          cd contracts
          forge build

      - name: Run contract tests
        run: |
          cd contracts
          forge test --gas-report

      - name: Run contract linting
        run: |
          cd contracts
          forge fmt --check
          forge build --sizes

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        run: |
          cd frontend
          npm test

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          go mod download

      - name: Run linting
        run: |
          cd backend
          golangci-lint run

      - name: Run tests
        run: |
          cd backend
          go test -v ./...

      - name: Build backend
        run: |
          cd backend
          go build -o bin/vyra-backend cmd/server/main.go

  # SDK Testing
  sdk-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: sdk/package-lock.json

      - name: Install dependencies
        run: |
          cd sdk
          npm ci

      - name: Run linting
        run: |
          cd sdk
          npm run lint

      - name: Run tests
        run: |
          cd sdk
          npm test

      - name: Build SDK
        run: |
          cd sdk
          npm run build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [contracts-test, frontend-test, backend-test, sdk-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: |
          cd backend
          docker build -t vyra-backend:latest .

      - name: Build frontend image
        run: |
          cd frontend
          docker build -f Dockerfile.dev -t vyra-frontend:latest .

      - name: Test Docker Compose
        run: |
          docker-compose -f docker-compose.yml config

  # Deploy to staging (if on develop branch)
  deploy-staging:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [contracts-test, frontend-test, backend-test, sdk-test, security-scan, docker-build]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

  # Deploy to production (if on main branch)
  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [contracts-test, frontend-test, backend-test, sdk-test, security-scan, docker-build]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
